/*
 * Toda la <Documentacion> se encuentra dentro de este Jframe
 */
package app;

import javax.swing.JOptionPane;


/**
 *
 * @author Garcia Magaña Fabian Yeudiel
 */
public class frame extends javax.swing.JFrame {
    
    /**
     * Creates new form frame
     */
    public frame() {
        initComponents();
        /**
         * Se establecen las caracterisitcas de la ventana ejecutable
         */
        this.setTitle("VLSM - Metodo analitico");
        this.setResizable(false);
        this.setLocationRelativeTo(null);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtIP1 = new javax.swing.JTextField();
        txtIP2 = new javax.swing.JTextField();
        txtIP3 = new javax.swing.JTextField();
        txtIP4 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtMASK1 = new javax.swing.JTextField();
        txtMASK2 = new javax.swing.JTextField();
        txtMASK3 = new javax.swing.JTextField();
        txtMASK4 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtMascara = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtRequisito = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPanel = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jbCalcular = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtShow = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtOrden = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtTamanos = new javax.swing.JTextArea();

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("VLSM - analitica");

        jLabel2.setText("IP");

        txtIP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIP1ActionPerformed(evt);
            }
        });

        txtIP2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIP2ActionPerformed(evt);
            }
        });

        txtIP3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIP3ActionPerformed(evt);
            }
        });

        txtIP4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIP4ActionPerformed(evt);
            }
        });

        jLabel3.setText("Mascara");

        txtMASK1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMASK1ActionPerformed(evt);
            }
        });

        txtMASK2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMASK2ActionPerformed(evt);
            }
        });

        txtMASK3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMASK3ActionPerformed(evt);
            }
        });

        txtMASK4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMASK4ActionPerformed(evt);
            }
        });

        jLabel4.setText("Mascara");

        jLabel5.setText("/");

        txtMascara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMascaraActionPerformed(evt);
            }
        });

        jLabel6.setText("Requisitos que agregara");

        txtPanel.setEditable(false);
        txtPanel.setColumns(20);
        txtPanel.setRows(5);
        jScrollPane1.setViewportView(txtPanel);

        jLabel8.setText("Orden");

        jLabel7.setText("Tamaño de Red");

        jbCalcular.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jbCalcular.setText("CALCULAR");
        jbCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCalcularActionPerformed(evt);
            }
        });

        jLabel12.setText("Direcciones Posibles");

        txtShow.setEditable(false);
        txtShow.setColumns(20);
        txtShow.setRows(5);
        jScrollPane4.setViewportView(txtShow);

        txtOrden.setEditable(false);
        txtOrden.setColumns(20);
        txtOrden.setRows(5);
        jScrollPane5.setViewportView(txtOrden);

        txtTamanos.setEditable(false);
        txtTamanos.setColumns(20);
        txtTamanos.setRows(5);
        jScrollPane6.setViewportView(txtTamanos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(64, 64, 64)
                                    .addComponent(jLabel8)
                                    .addGap(25, 25, 25)))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel12)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(txtRequisito, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtIP1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtIP2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIP3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIP4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtMASK1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtMASK2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMASK3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMASK4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMascara, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(jbCalcular)))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtIP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIP4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMASK1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(txtMASK2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMASK3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMASK4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(txtMascara, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbCalcular))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtRequisito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtIP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIP1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIP1ActionPerformed

    private void txtIP2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIP2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIP2ActionPerformed

    private void txtIP3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIP3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIP3ActionPerformed

    private void txtIP4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIP4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIP4ActionPerformed

    private void txtMASK1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMASK1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMASK1ActionPerformed

    private void txtMASK2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMASK2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMASK2ActionPerformed

    private void txtMASK3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMASK3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMASK3ActionPerformed

    private void txtMASK4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMASK4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMASK4ActionPerformed

    private void txtMascaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMascaraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMascaraActionPerformed

    private void jbCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCalcularActionPerformed
        // TODO add your handling code here:
        /**
         * Todo el codigo funcional del proyecto se encuentra dentro de este boton llamado <jbCalcularActionPermormed>
         * El programa inicia con la declaracion de una variable entera llamada <n> la cual almacena el valor de los requisitos a ingresar.
         * Se declara un array entero llamado <requisitos> el cual guarda los valores individuales de cada requisito.
         */
        int n = Integer.valueOf(txtRequisito.getText());
        int requisitos[] = new int[n];
        
        /**
         * Este ciclo for guarda los requisitos en el array y los lista en la interfaz
         * Para listar en orden alfabetico esta parte se utiliza una variable <char> llamada <convertido>
         * la cual convierte el valor numerico de la A en adelante en ascii para listarlo
         */
        for (int i = 0; i < n; i++) {
            requisitos[i] = Integer.parseInt(JOptionPane.showInputDialog("Agregue el requisito "+(i+1)));
            char convertido = (char)(i+65);
            txtShow.append(convertido+") "+requisitos[i]+"\n");
        }
        
        /**
         * Se declara una variable entera llamada <mascara> que almacena el valor de la mascara ingresada.
         */
        int mascara = Integer.parseInt(txtMascara.getText());
        
        /**
         * Este es un bloque de codigo de1 1 ciclo for con otro ciclo for anidado el cual ordena los requisitos de mayor a menor
         * Utilizando dos variables temporales y dos comparaciones para almacenar y remplazar el valor en orden.
         */
        for (int i = 0; i < n; i++) {
            int full = i;
            for (int j = i; j < n; j++) {
                if(requisitos[j] > requisitos[full]){
                    full = j;
                }
            }
            if(i != full){
                int tmp = requisitos[i];
                requisitos[i] = requisitos[full];
                requisitos[full] = tmp;
            }
        }
        
        /**
         * Este ciclo for escribe los valores ya ordenados en la interfaz.
         */
        for (int i = 0; i < n; i++) {
            txtOrden.append((i+1)+") "+requisitos[i]+"\n");
        }
        
        
        /**
         * Se declara una variable entera <exponente> la cual es el calculo de los bits utilizables para
         * Se declara una variable double <dirTotal> la cual almacena el resultado de la operacion de elevar 2 al exponente obtenido
         * Se escribe en la interfaz el valor de posibles direcciones.
         */
        int exponente = (32-mascara);
        double dirTotal = Math.pow(2, exponente);
        lblTotal.setText(String.valueOf((int)dirTotal));
        
        /**
         * Se declaran dos array enteros llamados <sizeRed> y <Subred>
         * Almacenan los valores de los host de redes necesarios y la mascara correspondiende
         * A traves de un ciclo for y una secuencia de if, se almacena en orden cada dato
         * de los valores de redes necesarios y sus mascaras.
         */
        int sizeRed[] = new int[n];
        int subRed[] = new int[n];
        for (int i = 0; i < n; i++) {
            if(requisitos[i]<1024 && requisitos[i]>512){
                sizeRed[i] = 1024;
                subRed[i] = 22;
            }
            if(requisitos[i]<512 && requisitos[i]>256){
                sizeRed[i] = 512;
                subRed[i] = 23;
            }
            if(requisitos[i]<256 && requisitos[i]>128){
                sizeRed[i] = 256;
                subRed[i] = 24;
            }
            if(requisitos[i]<128 && requisitos[i]>64){
                sizeRed[i] = 128;
                subRed[i] = 25;
            }
            if(requisitos[i]<64 && requisitos[i]>32){
                sizeRed[i] = 64;
                subRed[i] = 26;
            }
            if(requisitos[i]<32 && requisitos[i]>16){
                sizeRed[i] = 32;
                subRed[i] = 27;
            }
            if(requisitos[i]<16 && requisitos[i]>8){
                sizeRed[i] = 16;
                subRed[i] = 28;
            }
            if(requisitos[i]<8 && requisitos[i]>4){
                sizeRed[i] = 8;
                subRed[i] = 29;
            }
            if(requisitos[i]<4 && requisitos[i]>2){
                sizeRed[i] = 4;
                subRed[i] = 30;
            }
        }
        
        /**
         * Se declara una variable entera <sumaRedes>
         * Se utiliza un ciclo for para imprimir en la interfaz los valores de las redes necesarias
         * Al mismo tiempo se calcula el total de hosts de cada red ingresada para compararlos con 
         * los posibles hosts totales.
         */
        int sumaRedes = 0;
        for (int i = 0; i < n; i++) {
            txtTamanos.append(String.valueOf(sizeRed[i])+"\n");
            sumaRedes+= sizeRed[i];
        }
        txtTamanos.append("-----"+"\n");
        txtTamanos.append(String.valueOf(sumaRedes));
        
        /**
         * Se declaran 12 variables que son <ipN>, <subN>, <andN>
         * Almacenan cada valor de cada octeto de las IP, la mascara de red y el
         * resultado de la operacion and.
         */
        int ip1 = Integer.parseInt(txtIP1.getText());
        int ip2 = Integer.parseInt(txtIP2.getText());
        int ip3 = Integer.parseInt(txtIP3.getText());
        int ip4 = Integer.parseInt(txtIP4.getText());
        
        int sub1 = Integer.parseInt(txtMASK1.getText());
        int sub2 = Integer.parseInt(txtMASK2.getText());
        int sub3 = Integer.parseInt(txtMASK3.getText());
        int sub4 = Integer.parseInt(txtMASK4.getText());
        
        int and1 = (ip1 & sub1);
        int and2 = (ip2 & sub2);
        int and3 = (ip3 & sub3);
        int and4 = (ip4 & sub4);
        
        /**
         * En este bloque se realizan las iteraciones de las redes resultantes
         * primero se valida en un <if> si la suma total de las redes no supera los hosts posibles
         * si es asi se manda un mensaje de error
         * Caso contrario empieza el bloque de codigo, primero se imprime en pantalla el valor de la red mas grande de forma estatica
         * 
         * Posteriormente se declara la variable entera <cociente> y una variable estatica entera <resta> con el valor 256
         * seguido de un ciclo <for> para reocorrer el array de los tamaños de red y las subredes
         * este ciclo comienza desde el 1, debido a que la primera iteracion se realiza estaticamente siempre
         * evitando asi desbordamientos de memoria
         * se hace el calculo del cuarto octecto donde se suma la porcion de red y se valida dentro de un <if> 
         * si el ultimo octecto supera el valor de 256, de ser asi, entra al if
         * ahi se realizan las operaciones para calcular la iteracion, dandole al cociente el valor de la division del octeto entre 256
         * al tercer octeto se le suma el resultado de esa division
         * dentro de la variable resta de valor 256 se multiplica el cociente
         * al cuarto octeto se le resta el resultado de la operacion anteriormente realizada
         * y se le vuelve a asignar el valor de 256 a la resta para la siguiente iteracion.
         * finalmente se imprime en la interfaz la nueva ip resultante, el valor sumado y su respectiva mascara
         * 
         * De caso contrario a la comprobacion del <if> pasa a la secuencia else
         * significa que el valor del cuarto octeto no supero el valor de 256
         * por ende solo se agrega a la ip el resultado de la suma con el valor de red
         * y se imprime en la interfaz la siguiente iteracion
         * 
         * El ciclo for termina cuando se alcanza el numero total de requisitos ingresados
         * mostrando todas las iteraciones en pantalla.
         */
        if(sumaRedes <= dirTotal){
            txtPanel.append(String.valueOf(ip1)+"."+String.valueOf(ip2)+"."+String.valueOf(ip3)+"."+String.valueOf(ip4)+"\n");
            txtPanel.append(String.valueOf(sub1)+"."+String.valueOf(sub2)+"."+String.valueOf(sub3)+"."+String.valueOf(sub4)+"\n");
            txtPanel.append("---------------------------"+"\n");
            txtPanel.append(1+") "+String.valueOf(and1)+"."+String.valueOf(and2)+"."+String.valueOf(and3)+"."+String.valueOf(and4)+"     +"+sizeRed[0]+"     /"+subRed[0]+"\n");
            
            int cociente = 0;
            int resta = 256;
            for (int i = 0; i < n-1; i++) {
                and4+= sizeRed[i];
                if(and4 >= 256){
                    cociente = (and4/256);
                    and3+= cociente;
                    resta*= cociente;
                    and4-= resta;
                    resta = 256;
                    txtPanel.append("\n");
                    txtPanel.append((i+2)+") "+String.valueOf(and1)+"."+String.valueOf(and2)+"."+String.valueOf(and3)+"."+String.valueOf(and4)+"     +"+sizeRed[i+1]+"     /"+subRed[i+1]+"\n");
                }else{
                    txtPanel.append("\n");
                    txtPanel.append((i+2)+") "+String.valueOf(and1)+"."+String.valueOf(and2)+"."+String.valueOf(and3)+"."+String.valueOf(and4)+"     +"+sizeRed[i+1]+"     /"+subRed[i+1]+"\n");
                }
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "Los hosts seleccionados superan las redes posibles", "ERROR", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jbCalcularActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JButton jbCalcular;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTextField txtIP1;
    private javax.swing.JTextField txtIP2;
    private javax.swing.JTextField txtIP3;
    private javax.swing.JTextField txtIP4;
    private javax.swing.JTextField txtMASK1;
    private javax.swing.JTextField txtMASK2;
    private javax.swing.JTextField txtMASK3;
    private javax.swing.JTextField txtMASK4;
    private javax.swing.JTextField txtMascara;
    private javax.swing.JTextArea txtOrden;
    private javax.swing.JTextArea txtPanel;
    private javax.swing.JTextField txtRequisito;
    private javax.swing.JTextArea txtShow;
    private javax.swing.JTextArea txtTamanos;
    // End of variables declaration//GEN-END:variables
}
